
{
  "projectType": "laravel",
  "frameworkVersion": "Laravel 11",
  "phpVersion": "8.2",
  "rules": {
    "codingStyle": "psr-12",
    "architecture": "config-driven-queue-jobs",
    "preferRealCode": true,
    "useInterfacesForServices": true,
    "autoRegisterServices": true,
    "splitLargeClasses": true,
    "generateTests": true,
    "avoidMocks": true,
    "commentStyle": "phpdoc",
    "strictTyping": true
  },
  "focusOn": [
    "app/Services",
    "app/Jobs",
    "app/Console",
    "config/",
    "routes/web.php",
    "routes/console.php"
  ],
  "exclude": [
    "vendor/",
    "node_modules/",
    "storage/",
    "public/",
    ".env",
    ".idea/",
    "tests/Browser/",
    "bootstrap/cache/"
  ],
  "goals": [
    "Das Verhalten des Programms darf sich bei Refactoring niemals ändern.",
    "Reduziere Redundanz – nutze Hilfsklassen, Collections und Laravel-Komponenten.",
    "Nutze Laravel-Standards wie Eloquent, FormRequests, Middleware, Policies.",
    "Vermeide Logik in Blade-Views und Controllern – verwende Services.",
    "Implementiere immer sicheres Coding: keine Mass-Assignment-Lücken, kein unsicherer Input.",
    "Erzeuge Code, der direkt einsatzbereit ist – keine Platzhalter, keine Mocks.",
    "Funktioniere stabil auf Mac (dev) und VPS (prod) – keine plattformabhängigen Pfade."
  ],

  "refactoring": {
    "rules": [
      "Definition: Refactoring ist das Ändern der internen Struktur des Codes bei absolut identischem Verhalten.",
      "Wenn 'Refactoring' verlangt wird, darf sich das äußere Verhalten (Inputs, Outputs, Ablauf) in keiner Weise ändern.",
      "Ändere keine Logik, keine Bedingungen, keine Seiteneffekte – nur Struktur, Lesbarkeit, Wiederverwendbarkeit.",
      "Erlaube neue Methoden, kleinere Services, bessere Namen – aber keine neue Funktionalität.",
      "Jede Refaktorierung muss durch Tests oder Codevergleich validiert werden."
    ]
  },
  "environmentHandling": {
    "rules": [
      "Bearbeite niemals die .env-Datei direkt.",
      "Frage immer explizit nach, wenn Umgebungsvariablen geändert werden sollen."
    ]
  },
  "deploymentConsiderations": {
    "rules": [
      "Der Code muss auf macOS (Entwicklung) und Linux VPS (Produktion) ohne Änderungen lauffähig sein.",
      "Vermeide systemabhängige Pfade, File-Permissions oder Sonderbefehle (z. B. brew-only Tools)."
    ]
  },
  "codingStandards": {
    "rules": [
      "Verwende PSR-12-konformen Code mit strict_types und PHP 8.2 Features.",
      "Vermeide Ein-Buchstaben-Variablen – nutze sprechende Namen.",
      "Halte dich an Laravel-Konventionen: Controller-, Model-, Request-Benennung etc."
    ]
  },
  "redundancyElimination": {
    "rules": [
      "Wiederhole keinen Code – extrahiere ihn in Services, Traits oder Helper.",
      "Nutze Laravel Collections (map, filter, reduce), statt klassische Schleifen."
    ]
  },
  "fileManagement": {
    "rules": [
      "Keine Datei darf über 500 Zeilen wachsen – splitte in sinnvolle Module.",
      "Controller enthalten nur Routinglogik – alles andere gehört in Services."
    ]
  },
  "documentation": {
    "rules": [
      "Verwende PHPDoc mit @param, @return, @throws.",
      "Kommentiere alle nicht-selbstverständlichen Algorithmen und Sonderfälle inline."
    ]
  },
  "laravelBestPractices": {
    "rules": [
      "Nutze Dependency Injection statt Facades.",
      "Verwende Middleware für Auth/Role-Checks.",
      "Nutze FormRequest-Klassen für Validierung.",
      "Vermeide DB::table() – nutze Eloquent mit Scopes & Beziehungen."
    ]
  },
  "codeGeneration": {
    "rules": [
      "Kein Beispielcode oder Halbfertiges – alles muss direkt produktiv einsetzbar sein.",
      "Alle Methoden und Services müssen vollständig implementiert sein.",
      "Edge Cases, Error Handling, Rückgabewerte und Tests müssen berücksichtigt sein."
    ]
  },
  "testing": {
    "rules": [
      "Generiere nach Möglichkeit testbaren Code (entkoppelt, deterministisch, ohne globale Zustände).",
      "Verwende Laravel-Teststruktur: Feature- und Unit-Tests im tests/-Verzeichnis.",
      "Jede neu erzeugte Serviceklasse sollte eine zugehörige Testklasse erhalten, sofern sinnvoll."
    ]
  },
  "gitDeployment": {
    "description": "Git-Deployment-Konfiguration für Laravel-Projekte auf Plesk-Servern",
    "serverType": "plesk",
    "rules": [
      "Verwende SSH-Schlüsselauthentifizierung für passwortloses Deployment.",
      "Benenne Git-Remotes aussagekräftig (z.B. s22-projektname-web statt 'origin').",
      "Nutze post-receive-Hooks für automatisches Deployment und Laravel-Optimierungen.",
      "Bewahre wichtige Dateien (.env, storage-Verzeichnis) bei Deployments.",
      "Führe nach jedem Deployment die Laravel-Artisan-Befehle für Caching und Optimierung aus."
    ],
    "sshSetup": {
      "keyGeneration": "ssh-keygen -t ed25519 -C \"projektname git access\"",
      "serverInstallation": "echo \"[SSH-KEY]\" >> ~/.ssh/authorized_keys"
    },
    "postReceiveHook": {
      "features": [
        "Automatisches Deployment ins Webverzeichnis",
        "Laravel Artisan-Befehle (cache:clear, config:cache, etc.)",
        "Composer-Dependency-Management",
        "Beibehaltung der .env und storage-Inhalte",
        "Korrekte Berechtigungen für Produktionsumgebung"
      ],
      "script": "/Users/martin/Laravel-Projekte/mindbeamer.io.landing/post-receive-hook.sh",
      "installation": "Der Hook muss in ~/git/repository.git/hooks/post-receive auf dem Server platziert werden"
    },
    "workflow": {
      "development": "Lokale Entwicklung in PHPStorm",
      "deployment": "Commit und Push via Shift+Cmd+K in PHPStorm",
      "production": "Automatisches Update auf dem Server durch post-receive-Hook"
    }
  }
}
